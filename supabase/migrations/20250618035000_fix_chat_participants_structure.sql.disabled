-- Migration to fix chat_participants table structure
-- Ensure all required columns exist and RLS policies are correct

DO $$
BEGIN
    -- Add missing columns to chat_participants if they don't exist
    
    -- Add id column if it doesn't exist (should be primary key)
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = 'chat_participants' AND column_name = 'id'
    ) THEN
        ALTER TABLE chat_participants ADD COLUMN id UUID PRIMARY KEY DEFAULT gen_random_uuid();
        RAISE NOTICE 'Added id column to chat_participants';
    END IF;

    -- Add chat_id column if it doesn't exist
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = 'chat_participants' AND column_name = 'chat_id'
    ) THEN
        ALTER TABLE chat_participants ADD COLUMN chat_id UUID NOT NULL REFERENCES ticket_chats(id) ON DELETE CASCADE;
        RAISE NOTICE 'Added chat_id column to chat_participants';
    END IF;

    -- Add user_id column if it doesn't exist
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = 'chat_participants' AND column_name = 'user_id'
    ) THEN
        ALTER TABLE chat_participants ADD COLUMN user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE;
        RAISE NOTICE 'Added user_id column to chat_participants';
    END IF;

    -- Add joined_at column if it doesn't exist
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = 'chat_participants' AND column_name = 'joined_at'
    ) THEN
        ALTER TABLE chat_participants ADD COLUMN joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();
        RAISE NOTICE 'Added joined_at column to chat_participants';
    END IF;

    -- Add last_read_at column if it doesn't exist
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = 'chat_participants' AND column_name = 'last_read_at'
    ) THEN
        ALTER TABLE chat_participants ADD COLUMN last_read_at TIMESTAMP WITH TIME ZONE;
        RAISE NOTICE 'Added last_read_at column to chat_participants';
    END IF;

    -- Add can_write column if it doesn't exist
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = 'chat_participants' AND column_name = 'can_write'
    ) THEN
        ALTER TABLE chat_participants ADD COLUMN can_write BOOLEAN DEFAULT TRUE;
        RAISE NOTICE 'Added can_write column to chat_participants';
    END IF;

    -- Ensure RLS is enabled
    ALTER TABLE chat_participants ENABLE ROW LEVEL SECURITY;

    -- Create indexes if they don't exist
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_chat_participants_chat_id') THEN
        CREATE INDEX idx_chat_participants_chat_id ON chat_participants(chat_id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_chat_participants_user_id') THEN
        CREATE INDEX idx_chat_participants_user_id ON chat_participants(user_id);
    END IF;

    -- Grant permissions
    GRANT SELECT, INSERT, UPDATE, DELETE ON chat_participants TO authenticated;

    RAISE NOTICE 'Fixed chat_participants table structure';
END $$;

-- Drop and recreate RLS policies to ensure they work correctly
DROP POLICY IF EXISTS "Users can view chat participants if they are participants themselves" ON chat_participants;
DROP POLICY IF EXISTS "Agents and admins can manage chat participants" ON chat_participants;
DROP POLICY IF EXISTS "chat_participants_select_policy" ON chat_participants;
DROP POLICY IF EXISTS "chat_participants_insert_policy" ON chat_participants;
DROP POLICY IF EXISTS "chat_participants_update_policy" ON chat_participants;

-- Create simple, working RLS policies
CREATE POLICY "chat_participants_read_policy" ON chat_participants
FOR SELECT USING (
    user_id = auth.uid() 
    OR EXISTS (
        SELECT 1 FROM users 
        WHERE id = auth.uid() 
        AND role IN ('admin', 'agent')
    )
);

CREATE POLICY "chat_participants_write_policy" ON chat_participants
FOR ALL USING (
    user_id = auth.uid() 
    OR EXISTS (
        SELECT 1 FROM users 
        WHERE id = auth.uid() 
        AND role IN ('admin', 'agent')
    )
);

SELECT 'Chat participants table structure and policies fixed successfully' as status; 