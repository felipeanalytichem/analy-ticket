-- Fix Category Save Error
-- This migration fixes two issues:
-- 1. RLS policies preventing category creation (main issue)
-- 2. Missing knowledge_categories table causing 404 errors

-- ============================================
-- Part 1: Fix Categories RLS Policies
-- ============================================

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Admin can manage categories" ON categories;
DROP POLICY IF EXISTS "Everyone can view categories" ON categories;
DROP POLICY IF EXISTS "Admin can manage subcategories" ON subcategories;
DROP POLICY IF EXISTS "Everyone can view subcategories" ON subcategories;

-- Create proper RLS policies for categories table
CREATE POLICY "Everyone can view categories"
ON categories FOR SELECT
USING (true);

CREATE POLICY "Admin can manage categories"
ON categories FOR ALL
USING (
  EXISTS (
    SELECT 1 FROM auth.users
    WHERE auth.users.id = auth.uid()
    AND auth.users.raw_user_meta_data->>'role' = 'admin'
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM auth.users
    WHERE auth.users.id = auth.uid()
    AND auth.users.raw_user_meta_data->>'role' = 'admin'
  )
);

-- Create proper RLS policies for subcategories table
CREATE POLICY "Everyone can view subcategories"
ON subcategories FOR SELECT
USING (true);

CREATE POLICY "Admin can manage subcategories"
ON subcategories FOR ALL
USING (
  EXISTS (
    SELECT 1 FROM auth.users
    WHERE auth.users.id = auth.uid()
    AND auth.users.raw_user_meta_data->>'role' = 'admin'
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM auth.users
    WHERE auth.users.id = auth.uid()
    AND auth.users.raw_user_meta_data->>'role' = 'admin'
  )
);

-- ============================================
-- Part 2: Create Missing Knowledge Categories Table
-- ============================================

CREATE TABLE IF NOT EXISTS knowledge_categories (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  description TEXT,
  icon TEXT,
  color TEXT DEFAULT '#3B82F6',
  sort_order INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  parent_id UUID REFERENCES knowledge_categories(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_knowledge_categories_slug ON knowledge_categories(slug);
CREATE INDEX IF NOT EXISTS idx_knowledge_categories_parent_id ON knowledge_categories(parent_id);
CREATE INDEX IF NOT EXISTS idx_knowledge_categories_is_active ON knowledge_categories(is_active) WHERE is_active = true;

-- Enable RLS on knowledge_categories
ALTER TABLE knowledge_categories ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for knowledge_categories
CREATE POLICY "Everyone can view active knowledge categories"
ON knowledge_categories FOR SELECT
USING (is_active = true);

CREATE POLICY "Admin can manage knowledge categories"
ON knowledge_categories FOR ALL
USING (
  EXISTS (
    SELECT 1 FROM auth.users
    WHERE auth.users.id = auth.uid()
    AND auth.users.raw_user_meta_data->>'role' = 'admin'
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM auth.users
    WHERE auth.users.id = auth.uid()
    AND auth.users.raw_user_meta_data->>'role' = 'admin'
  )
);

-- Insert default knowledge categories
INSERT INTO knowledge_categories (name, slug, description, icon, sort_order) VALUES
('General', 'general', 'General knowledge and information', 'info', 1),
('Technical', 'technical', 'Technical documentation and guides', 'settings', 2),
('User Guides', 'user-guides', 'User guides and tutorials', 'book', 3)
ON CONFLICT (slug) DO NOTHING;
